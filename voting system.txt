abstract class Person {
    private String id;
    private String name;

    public Person(String id, String name) {
        this.id = id;
        this.name = name;
    }
    // getters and setters
}

class Voter extends Person {
    private boolean hasVoted;

    public Voter(String id, String name) {
        super(id, name);
        this.hasVoted = false;
    }

    public boolean hasVoted() {
        return hasVoted;
    }

    public void vote() {
        if (hasVoted) throw new IllegalStateException("Voter has already voted");
        this.hasVoted = true;
    }
}

class Candidate extends Person {
    private int votesReceived;

    public Candidate(String id, String name) {
        super(id, name);
        votesReceived = 0;
    }

    public void receiveVote() {
        votesReceived++;
    }

    public int getVotesReceived() {
        return votesReceived;
    }
}

// Voting System manager class to handle voting, store voters and candidates
class VotingSystem {
    private ArrayList<Voter> voters = new ArrayList<>();
    private ArrayList<Candidate> candidates = new ArrayList<>();

    public void registerVoter(Voter voter) {
        voters.add(voter);
    }

    public void registerCandidate(Candidate candidate) {
        candidates.add(candidate);
    }

    public void castVote(String voterId, String candidateId) throws Exception {
        Voter voter = findVoterById(voterId);
        Candidate candidate = findCandidateById(candidateId);

        if (voter == null) throw new Exception("Voter not found");
        if (candidate == null) throw new Exception("Candidate not found");

        if (voter.hasVoted()) {
            throw new Exception("Voter has already voted");
        }

        voter.vote();
        candidate.receiveVote();
    }

    private Voter findVoterById(String id) {
        for (Voter v : voters) {
            if (v.getId().equals(id)) return v;
        }
        return null;
    }

    private Candidate findCandidateById(String id) {
        for (Candidate c : candidates) {
            if (c.getId().equals(id)) return c;
        }
        return null;
    }

    public void displayResults() {
        System.out.println("Voting Results:");
        for (Candidate c : candidates) {
            System.out.println(c.getName() + ": " + c.getVotesReceived() + " votes");
        }
    }
}
